function h(i,l){for(var e=0;e<l.length;e++){const t=l[e];if(typeof t!="string"&&!Array.isArray(t)){for(const o in t)if(o!=="default"&&!(o in i)){const r=Object.getOwnPropertyDescriptor(t,o);r&&Object.defineProperty(i,o,r.get?r:{enumerable:!0,get:()=>t[o]})}}}return Object.freeze(Object.defineProperty(i,Symbol.toStringTag,{value:"Module"}))}var g={},u={get exports(){return g},set exports(i){g=i}};(function(i,l){ace.define("ace/mode/gitignore_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"],function(e,t,o){var r=e("../lib/oop"),s=e("./text_highlight_rules").TextHighlightRules,n=function(){this.$rules={start:[{token:"comment",regex:/^\s*#.*$/},{token:"keyword",regex:/^\s*!.*$/}]},this.normalizeRules()};n.metaData={fileTypes:["gitignore"],name:"Gitignore"},r.inherits(n,s),t.GitignoreHighlightRules=n}),ace.define("ace/mode/gitignore",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/gitignore_highlight_rules"],function(e,t,o){var r=e("../lib/oop"),s=e("./text").Mode,n=e("./gitignore_highlight_rules").GitignoreHighlightRules,a=function(){this.HighlightRules=n,this.$behaviour=this.$defaultBehaviour};r.inherits(a,s),function(){this.lineCommentStart="#",this.$id="ace/mode/gitignore"}.call(a.prototype),t.Mode=a}),function(){ace.require(["ace/mode/gitignore"],function(e){i&&(i.exports=e)})}()})(u);const c=g,d=h({__proto__:null,default:c},[g]);export{d as m};
